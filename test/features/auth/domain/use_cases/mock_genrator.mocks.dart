// Mocks generated by Mockito 5.4.6 from annotations
// in mood_music_mobile/test/features/auth/domain/use_cases/mock_genrator.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mood_music_mobile/core/utils/entity_model_conv.dart' as _i8;
import 'package:mood_music_mobile/features/auth/data/datasources/local_data_source.dart'
    as _i6;
import 'package:mood_music_mobile/features/auth/data/datasources/remote_data_source.dart'
    as _i7;
import 'package:mood_music_mobile/features/auth/data/model/user_model.dart'
    as _i2;
import 'package:mood_music_mobile/features/auth/domain/entities/user_entity.dart'
    as _i3;
import 'package:mood_music_mobile/features/auth/domain/repositories/user_repo.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUserModel_0 extends _i1.SmartFake implements _i2.UserModel {
  _FakeUserModel_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeUserEntity_1 extends _i1.SmartFake implements _i3.UserEntity {
  _FakeUserEntity_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [UserRepo].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserRepo extends _i1.Mock implements _i4.UserRepo {
  MockUserRepo(_i7.RemoteDataSource remotedata, _i6.LocalDataSource localdata) {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.UserModel> login(String? username, String? password) =>
      (super.noSuchMethod(
            Invocation.method(#login, [username, password]),
            returnValue: _i5.Future<_i2.UserModel>.value(
              _FakeUserModel_0(
                this,
                Invocation.method(#login, [username, password]),
              ),
            ),
          )
          as _i5.Future<_i2.UserModel>);

  @override
  _i5.Future<void> logout(String? token) =>
      (super.noSuchMethod(
            Invocation.method(#logout, [token]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<_i2.UserModel> register(
    String? username,
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#register, [username, email, password]),
            returnValue: _i5.Future<_i2.UserModel>.value(
              _FakeUserModel_0(
                this,
                Invocation.method(#register, [username, email, password]),
              ),
            ),
          )
          as _i5.Future<_i2.UserModel>);

  @override
  _i5.Future<_i2.UserModel?> getCachedUser() =>
      (super.noSuchMethod(
            Invocation.method(#getCachedUser, []),
            returnValue: _i5.Future<_i2.UserModel?>.value(),
          )
          as _i5.Future<_i2.UserModel?>);

  @override
  _i5.Future<void> clearCachedUser() =>
      (super.noSuchMethod(
            Invocation.method(#clearCachedUser, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> cacheUser(_i2.UserModel? userModel) =>
      (super.noSuchMethod(
            Invocation.method(#cacheUser, [userModel]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);
}

/// A class which mocks [LocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalDataSource extends _i1.Mock implements _i6.LocalDataSource {
  MockLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<void> cacheUser(_i2.UserModel? userModel) =>
      (super.noSuchMethod(
            Invocation.method(#cacheUser, [userModel]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<_i2.UserModel?> getCachedUser() =>
      (super.noSuchMethod(
            Invocation.method(#getCachedUser, []),
            returnValue: _i5.Future<_i2.UserModel?>.value(),
          )
          as _i5.Future<_i2.UserModel?>);

  @override
  _i5.Future<void> clearCachedUser() =>
      (super.noSuchMethod(
            Invocation.method(#clearCachedUser, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);
}

/// A class which mocks [RemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoteDataSource extends _i1.Mock implements _i7.RemoteDataSource {
  MockRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.UserModel> login(String? username, String? password) =>
      (super.noSuchMethod(
            Invocation.method(#login, [username, password]),
            returnValue: _i5.Future<_i2.UserModel>.value(
              _FakeUserModel_0(
                this,
                Invocation.method(#login, [username, password]),
              ),
            ),
          )
          as _i5.Future<_i2.UserModel>);

  @override
  _i5.Future<void> logout(String? token) =>
      (super.noSuchMethod(
            Invocation.method(#logout, [token]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<_i2.UserModel> register(
    String? username,
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#register, [username, email, password]),
            returnValue: _i5.Future<_i2.UserModel>.value(
              _FakeUserModel_0(
                this,
                Invocation.method(#register, [username, email, password]),
              ),
            ),
          )
          as _i5.Future<_i2.UserModel>);
}

/// A class which mocks [EntityModelConv].
///
/// See the documentation for Mockito's code generation for more information.
class MockEntityModelConv extends _i1.Mock implements _i8.EntityModelConv {
  MockEntityModelConv() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.UserModel toModel(_i3.UserEntity? entity) =>
      (super.noSuchMethod(
            Invocation.method(#toModel, [entity]),
            returnValue: _FakeUserModel_0(
              this,
              Invocation.method(#toModel, [entity]),
            ),
          )
          as _i2.UserModel);

  @override
  _i3.UserEntity toEntity(_i2.UserModel? model) =>
      (super.noSuchMethod(
            Invocation.method(#toEntity, [model]),
            returnValue: _FakeUserEntity_1(
              this,
              Invocation.method(#toEntity, [model]),
            ),
          )
          as _i3.UserEntity);
}
